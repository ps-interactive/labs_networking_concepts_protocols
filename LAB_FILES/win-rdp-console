
#fun fact the http://169.254.169.254 address for the box has the userdata and meta data!.
#beware of the need to escape characters that terraform uses. https://www.terraform.io/docs/configuration/expressions/strings.html
#BAT, and VBS can be executed as well see aws user data information.
#TEMLATE: v3.0 4-17-2020 ironcat
<powershell>
#PS Functions that can be used as required.
##########################################

###PS ONLY DO NOT EDIT###
#Checks if this is first boot, and sets $rcaount to 0.
#REBOOT FRAMEWORKS START#
$rcheck = test-path c:\rcount
if ($rcheck -eq $False) 
{
    $rcount = 0
    $rcount | out-file c:\rcount
}
# checks the value of the c:\rcount file and returns the value.
function rcount_check()
{
    $rcount = get-content c:\rcount
    return $rcount
}
#Increments the rcount file contents by 1. Use this before causing a reboot.
function rcount_inc()
{
    [int]$rcount = get-content c:\rcount
    $rcount++
    $rcount | out-file c:\rcount
}
# REBOOT FRAMEWORK END #

#Credential functions Includes Required credentials for guacamole function, net.webrequest proxy use and global local credental as Administrator with new PW.
#All globally usable varaiables created, need to run again after a reboot.

function cred_init()
{
    net user Administrator ${win_rdp_password}
    $global:message2 = "${win_rdp_password}"; $message2 |out-file -append c:/peaceinourtime.txt
    $global:message3 = "Local Administator Account PW : " + $message2
    #Establish Proxy Credentials
    $global:puser = 'tstark'
    $global:ppass = 'pssecrocks'
    $global:psecpasswd = ConvertTo-SecureString $ppass -AsPlainText -Force
    $global:proxy_credential = New-Object System.Management.Automation.PSCredential($puser, $psecpasswd)
    [system.net.webrequest]::DefaultWebProxy = new-object system.net.webproxy('http://172.31.245.222:8888')
    $global:webclient = New-Object System.Net.webclient
    $global:webclient.Proxy.Credentials = $proxy_credential
    #Establish local system credentails
    $global:luser = "Administrator"
    $global:lpass = "${win_rdp_password}"
    $global:lsecpasswd = ConvertTo-SecureString $lpass -AsPlainText -Force
    $global:local_credential = New-Object System.Management.Automation.PSCredential($luser, $lsecpasswd)
    $global:local_credential

}

#Function to allow normal webbrowsing on server disable web protection

function Disable-ieESC
{
$AdminKey = “HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}\”
$UserKey = “HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A8-37EF-4b3f-8CFC-4F3A74704073}\” 
Set-ItemProperty -Path $AdminKey -Name “IsInstalled” -Value 0
Set-ItemProperty -Path $UserKey -Name “IsInstalled” -Value 0
Stop-Process -Name Explorer
Write-Host “IE Enhanced Security Configuration (ESC) has been disabled.” -ForegroundColor Green
$message3 = "IE Enhanced Security Disabled"; $message3 | out-file c:/peaceinourtime.txt -append;
}

#Function to pull the ssh key from the s3 bucket, this ssh key is the key used for ever EC2 instance and can be used for a depedency framework. *issues with DC use 4-17
function Disable-ServerManager {
    New-ItemProperty -Path HKCU:\Software\Microsoft\ServerManager -Name DoNotOpenServerManagerAtLogon -PropertyType DWORD -Value “0x1” –Force
}

function key_pull () {
    #must have cred_init ran prior to running this function in the same boot session!
    #set stattus via scp
    invoke-webrequest -proxy http://172.31.245.222:8888 -proxyCredential $proxy_credential -uri https://securitylab-${guac_auth_password}.s3-us-west-2.amazonaws.com/lab-key -outfile "c:\programdata\amazon\lab-key"
    $path = "c:\programdata\amazon\lab-key"
    #this!
    icacls.exe $path /reset
    icacls.exe $path /inheritance:r
    icacls.exe $path /GRANT "$($env:USERNAME):(R)"
    icacls.exe $path /remove BUILTIN\\BUILTIN
    #how to fix lab permissions :()
}

#Upate status of a device to proxy for dependency framework.

function status_update ($s,$name) {
    #Dependencies:
    # - key_pull
    # - cred_init
    $path = "c:\programdata\amazon\lab-key"
    $status = $s
    $status | out-file "c:\$name-status"
    scp -i $path -oStrictHostKeyChecking=no "c:\$name-status" ubuntu@172.31.245.222:/home/ubuntu/$name-status     
}
# Example - status_update 0 "client01"
# Check the status of other devices for dependency.

function status_check ($name) {
    $path = "c:\programdata\amazon\lab-key"
    scp -i $path -oStrictHostKeyChecking=no  ubuntu@172.31.245.222:/home/ubuntu/$name-status "c:\$name-status"
    $status = get-content "c:\$name-status"
    return $status
}

function remove_amznicons() {
    remove-item "c:\Users\Administrator\Desktop\EC2 Microsoft Windows Guide.website"
    remove-item "c:\Users\Administrator\Desktop\EC2 Feedback.website"
}

function clone_labgit ($gituri) {
    refreshenv
    #Always follow using "LAB_FILE" folder to then hold all conent the lab or this will fail
    #Example - clone_labgit  "https://github.com/ps-interactive/lab_visualizing_network_traffic_wireshark.git"
    $gituri
    $gitstub = $gituri.split("/")[4].split(".")[0]
    $gitstub >> c:\peaceinourtime
    $gitpath1 = 'c:\Users\Administrator\Desktop\'+$gitstub
    $gitpath1 >> c:\peaceinourtime
    $gitlist = "-c http.proxy=http://tstark:pssecrocks@172.31.245.222:8888 clone $gituri $gitpath1"
    $gitlist >> c:\peacinourtime
    try {start-process  -filepath 'C:\Program Files\git\bin\git.exe' -argumentlist $gitlist -wait -ErrorAction continue}catch{$_ >> c:\peaceinourtime.txt }
    $gitpath2 = 'C:\Users\Administrator\Desktop\'+$gitstub+'\LAB_FILES\'
    $gitpath2 >> c:\peacinourtime
    copy-item -recurse $gitpath2 -destination 'c:\Users\Administrator\Desktop\'
    remove-item -recurse -force $gitpath1
}
function create_dskticon ($TargetFile,$ShortcutFile) {
    # Example - 
    #$TargetFile = "C:\Program Files\Wireshark\Wireshark.exe"
    #$ShortcutFile = "C:\Users\Public\Desktop\Wireshark.lnk"
    $WScriptShell = New-Object -ComObject WScript.Shell
    $Shortcut = $WScriptShell.CreateShortcut($ShortcutFile)
    $Shortcut.TargetPath = $TargetFile
    $Shortcut.IconLocation = "$TargetFile, 0"
    $Shortcut.Save()
}

function Password_to_LAB_FILES {
    #Add Password to LAB_FILES
    net user Administrator ${win_rdp_password}
    new-item -ItemProperty directory -Name Lab_Files -path c:/Users/Administrator/Desktop/
    $message2 = "${win_rdp_password}"; $message2 |out-file -append c:/Users/Administrator/Desktop/Lab_Files/companypw2.txt

}

function Disable-ServerManager {
    New-ItemProperty -Path HKCU:\Software\Microsoft\ServerManager -Name DoNotOpenServerManagerAtLogon -PropertyType DWORD -Value “0x1” –Force
}
#################################################################################

#MAIN! Start with checking reboot count.
$r = rcount_check
if ($r -eq 0)
{
#first boot code goes here:
######PS ONLY!###########DO NOT EDIT############################
cred_init
$Global:message3 |out-file c:\Users\Administrator\Desktop\Lab_Info.txt -append
Disable-ieESC
remove_amznicons
#chocolate install
#Future - Add succes checking then wait for success - monitor failures w/trycatch
invoke-webrequest -Proxy http://172.31.245.222:8888 -uri https://chocolatey.org/install.ps1 -Verbose -ProxyCredential $Global:proxy_credential -OutFile install.ps1
$env:chocolateyProxyLocation='http://tstark:pssecrocks@172.31.245.222:8888'
$env:chocolateyProxyPassword='pssecrocks'
$env:chocolateyProxyUser='tstark'
./install.ps1
# Install Git to pull labfiles
choco install git -y --proxy="172.31.245.222:8888" --proxy-user="tstark" --proxy-password="pssecrocks"


###AUTHORS STARTEDITING HERE!#########
#Pull down pacakge change for specific lab git location
clone_labgit("https://github.com/ps-interactive/labs_networking_concepts_protocols.git")

#Addded functions
Password_to_LAB_FILES
Disable-ServerManager

# CreateIcons
# create_dskticon ($TargetFile,$ShortcutFile)
#putty
#Windows powershell
create_dskticon ("%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell.exe","C:\Users\Public\Desktop\Windows PowerShell (x64).lnk")
  
# Command Prompt link
create_dskticon ("%windir%\system32\cmd.exe","C:\Users\Public\Desktop\Command Prompt.lnk")

#### AUTHOR APPLICATION INSTALLATIONS METHODS#########
#Choco install whever else you need here:
# Example - choco install pwsh -y --proxy="172.31.245.222:8888" --proxy-user="tstark" --proxy-password="pssecrocks"
choco install nmap -y --proxy="172.31.245.222:8888" --proxy-user="tstark" --proxy-password="pssecrocks"
choco install wireshark -y --proxy="172.31.245.222:8888" --proxy-user="tstark" --proxy-password="pssecrocks"
choco install php -y --proxy="172.31.245.222:8888" --proxy-user="tstark" --proxy-password="pssecrocks"
choco install thunderbird -y --proxy="172.31.245.222:8888" --proxy-user="tstark" --proxy-password="pssecrocks"
choco install filezilla -y --proxy="172.31.245.222:8888" --proxy-user="tstark" --proxy-password="pssecrocks"
choco install putty -y --proxy="172.31.245.222:8888" --proxy-user="tstark" --proxy-password="pssecrocks"
########################################################################################
#Invoke web request pull packages for installation
# Dependency - cred_init
# Example - invoke-webrequest -uri <downloaduri> -usebasicparsing -outfile <filename>;start-process <filename> (there are few variations that may be required for starting new processes)
#
#
########################################################################################
# Install Windows feature
# Example - Get-WindowsFeature -Name *RSAT* | Install-windowsfeature

    #Enable Network Discovery
    Get-NetFirewallRule -DisplayGroup 'Network Discovery'|Set-NetFirewallRule -Profile 'Private, Domain' -Enabled true -PassThru|select Name,DisplayName,Enabled,Profile|ft -a
    New-NetFirewallRule -DisplayName "Allow Inbound From DC" -Direction Inbound -LocalPort 445 -Protocol TCP -Action Allow

    # Enable File Sharing
    Get-NetFirewallRule -DisplayGroup 'File and Printer Sharing'|Set-NetFirewallRule -Profile 'Private, Domain' -Enabled true -PassThru|select Name,DisplayName,Enabled,Profile|ft -a

    # Set trustedhosts, Rename computer and reboot
    set-item WSMan:\localhost\Client\TrustedHosts -Value * -Force -verbose
    rename-computer -NewName client01 -verbose | out-file "c:\logging.txt" -append
    restart-computer -force
########################################################################################
#Remember if install requires a reboot us rcount_inc before the rboot action and continue custom actions in an elseif like commented below.
}
# elseif ($r -eq 1)
#rcount 1 after reboot 1 actions
#                 { rcount_inc
#pass one if you incremented rcount
#                  elseif ($r -eq 2)
#recount boot 2 actions
#                  {
# Final Message for completion to not modify.
$message = "iambecomedeath"; $message | out-file c:/peaceinourtime.txt -append;
#rcount_inc
#}

###
</powershell>
#Optional persit tage will run the script at each restart.
<persist>true</persist>




